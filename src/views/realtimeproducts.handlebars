<h1>Lista de productos en tiempo real</h1>
<section class="mt-6">
  <div class="container">
    <div class="row">
      {{#each products}}
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="{{thumbnail}}" class="card-img-top" alt="Product Image">
            <div class="card-body">
              <h5 class="card-title">{{title}}</h5>
              <p class="card-text">{{description}}</p>
              <p class="card-text">{{price}}</p>
                 <p class="card-text">{{id}}</p>

              <button class="btn btn-danger" type="button" onclick="deleteProduct({{id}})">
                <ion-icon name="trash"></ion-icon>
              </button>
            </div>
          </div>
        </div>
      {{/each}}
    </div>
  </div>
</section>

<section>
  <div class="container mt-6" style="max-width: 500px">
    <form action="/api/products" method="post" enctype="multipart/form-data">
      <h3 class="is-size-3 mb-5">Ingrese un nuevo producto</h3>
      <div class="mb-3">
        <label class="form-label">Nombre</label>
        <input
          class="form-control is-valid"
          type="text"
          placeholder="Ingrese el nombre del producto"
          value=""
          name="title"
        />
      </div>
      <div class="mb-3">
        <label class="form-label">Descripción</label>
        <textarea
          value=""
          name="description"
          class="form-control is-valid"
          placeholder="Ingrese una breve descripción del producto"
          rows="3"
        ></textarea>
      </div>

      <div class="mb-3">
        <label class="form-label">Código</label>
        <input
          class="form-control is-valid"
          type="text"
          placeholder="Ingrese el código del producto"
          value=""
          name="code"
        />
      </div>

      <div class="mb-3">
        <label class="form-label">Precio</label>
        <input
          class="form-control is-valid"
          type="text"
          placeholder="Ingrese el precio del producto"
          value=""
          name="price"
        />
      </div>

      <div class="mb-3">
        <label class="form-label">Stock</label>
        <input
          class="form-control is-valid"
          type="number"
          min="0"
          max="10000"
          value="0"
          name="stock"
        />
      </div>

      <div class="mb-3">
        <label class="form-label">Categoría</label>
        <div class="select is-primary">
          <select name="category" class="form-select">
            <option value="Tecnología">Tecnología</option>
            <option value="Hogar">Hogar</option>
            <option value="Smartphones">Smartphones</option>
            <option value="Muebles">Muebles</option>
            <option value="Cosmética y belleza">Cosmética y belleza</option>
            <option value="Indumentaria">Indumentaria</option>
            <option value="Herramientas">Herramientas</option>
          </select>
        </div>
      </div>

      <div class="mb-3">
        <div class="form-file">
          <input class="form-file-input" type="file" name="thumbnail" />
          <label class="form-file-label">
            <span class="form-file-text">Sube una imagen</span>
            <span class="form-file-button">
              <ion-icon
                name="cloud-upload-outline"
                style="font-size: 25px"
              ></ion-icon>
            </span>
          </label>
        </div>
      </div>
      <div class="mb-3">
        <button class="btn btn-primary">Guardar</button>
      </div>
    </form>
  </div>
</section>

<br>

<h3>Eliminar Producto</h3>
<form id="deleteProductForm">
  <input id="Delete" type="text" name="delete" placeholder="Id Producto" class="delete-product-input">
  <button id="deleteProductBtn" type="submit">Eliminar</button>
</form>


<script src="/socket.io/socket.io.js"></script>
<script src="/js/realtimeProducts.js"></script>

{{!-- <script>
  const socket = io();

  socket.on('connect', () => {
    console.log('Conectado al servidor de sockets');
  });

  const createProductForm = document.getElementById('createProductForm');

  createProductForm.addEventListener('submit', event => {
    event.preventDefault();

    const formData = new FormData(createProductForm);
    const product = Object.fromEntries(formData.entries());

    socket.emit('createProduct', product);
  });

  // Escuchar eventos de clic en los botones de eliminación
  const deleteProductButtons = document.getElementsByClassName('deleteProductBtn');
  Array.from(deleteProductButtons).forEach(button => {
    button.addEventListener('click', event => {
      event.preventDefault();
      const productId = event.target.dataset.productId;
      deleteProduct(productId);
    });
  });

  --}}
